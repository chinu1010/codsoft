import random

def print_board(board):
    print("-------------")
    for row in board:
        print("|", " | ".join(row), "|")
        print("-------------")

def check_winner(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all([cell == player for cell in board[i]]) or \
           all([board[j][i] == player for j in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]) or \
       all([board[i][2-i] == player for i in range(3)]):
        return True
    return False

def available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == ' ']

def player_move(board):
    while True:
        try:
            row = int(input("Enter row (0, 1, or 2): "))
            col = int(input("Enter column (0, 1, or 2): "))
            if (row, col) in available_moves(board):
                return row, col
            else:
                print("Invalid move. Try again.")
        except ValueError:
            print("Invalid input. Try again.")

def computer_move(board):
    return random.choice(available_moves(board))

def play_game():
    board = [[' ']*3 for _ in range(3)]
    print_board(board)
    while True:
        # Player's move
        row, col = player_move(board)
        board[row][col] = 'X'
        print_board(board)
        if check_winner(board, 'X'):
            print("Congratulations! You win!")
            break
        if len(available_moves(board)) == 0:
            print("It's a tie!")
            break

        # Computer's move
        print("Computer's move:")
        row, col = computer_move(board)
        board[row][col] = 'O'
        print_board(board)
        if check_winner(board, 'O'):
            print("Computer wins! Better luck next time.")
            break
        if len(available_moves(board)) == 0:
            print("It's a tie!")
            break

play_game()
